// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;

namespace CsBindgen
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "indy-credx";

        [DllImport(__DllName, EntryPoint = "credx_create_credential_definition", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_create_credential_definition(FfiStr origin_did, ObjectHandle schema, FfiStr tag, FfiStr signature_type, sbyte support_revocation, ObjectHandle* cred_def_p, ObjectHandle* cred_def_pvt_p, ObjectHandle* key_proof_p);

        [DllImport(__DllName, EntryPoint = "credx_credential_definition_get_attribute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_credential_definition_get_attribute(ObjectHandle handle, FfiStr name, byte** result_p);

        [DllImport(__DllName, EntryPoint = "credx_create_credential_offer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_create_credential_offer(FfiStr schema_id, ObjectHandle cred_def, ObjectHandle key_proof, ObjectHandle* cred_offer_p);

        [DllImport(__DllName, EntryPoint = "credx_create_credential_request", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_create_credential_request(FfiStr prover_did, ObjectHandle cred_def, ObjectHandle link_secret, FfiStr link_secret_id, ObjectHandle cred_offer, ObjectHandle* cred_req_p, ObjectHandle* cred_req_meta_p);

        [DllImport(__DllName, EntryPoint = "credx_create_credential", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_create_credential(ObjectHandle cred_def, ObjectHandle cred_def_private, ObjectHandle cred_offer, ObjectHandle cred_request, FfiList attr_names, FfiList attr_raw_values, FfiList attr_enc_values, FfiCredRevInfo* revocation, ObjectHandle* cred_p, ObjectHandle* rev_reg_p, ObjectHandle* rev_delta_p);

        [DllImport(__DllName, EntryPoint = "credx_encode_credential_attributes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_encode_credential_attributes(FfiList attr_raw_values, byte** result_p);

        [DllImport(__DllName, EntryPoint = "credx_process_credential", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_process_credential(ObjectHandle cred, ObjectHandle cred_req_metadata, ObjectHandle link_secret, ObjectHandle cred_def, ObjectHandle rev_reg_def, ObjectHandle* cred_p);

        [DllImport(__DllName, EntryPoint = "credx_credential_get_attribute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_credential_get_attribute(ObjectHandle handle, FfiStr name, byte** result_p);

        [DllImport(__DllName, EntryPoint = "credx_get_current_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_get_current_error(byte** error_json_p);

        [DllImport(__DllName, EntryPoint = "credx_create_link_secret", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_create_link_secret(ObjectHandle* link_secret_p);

        [DllImport(__DllName, EntryPoint = "credx_buffer_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void credx_buffer_free(ByteBuffer buffer);

        [DllImport(__DllName, EntryPoint = "credx_set_default_logger", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_set_default_logger();

        [DllImport(__DllName, EntryPoint = "credx_version", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* credx_version();

        [DllImport(__DllName, EntryPoint = "credx_object_get_json", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_object_get_json(ObjectHandle handle, ByteBuffer* result_p);

        [DllImport(__DllName, EntryPoint = "credx_object_get_type_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_object_get_type_name(ObjectHandle handle, byte** result_p);

        [DllImport(__DllName, EntryPoint = "credx_object_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void credx_object_free(ObjectHandle handle);

        [DllImport(__DllName, EntryPoint = "credx_generate_nonce", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_generate_nonce(byte** nonce_p);

        [DllImport(__DllName, EntryPoint = "credx_create_presentation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_create_presentation(ObjectHandle pres_req, FfiList credentials, FfiList credentials_prove, FfiList self_attest_names, FfiList self_attest_values, ObjectHandle link_secret, FfiList schemas, FfiList cred_defs, ObjectHandle* presentation_p);

        [DllImport(__DllName, EntryPoint = "credx_verify_presentation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_verify_presentation(ObjectHandle presentation, ObjectHandle pres_req, FfiList schemas, FfiList cred_defs, FfiList rev_reg_defs, FfiList rev_reg_entries, sbyte* result_p);

        [DllImport(__DllName, EntryPoint = "credx_verify_presentation_legacy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_verify_presentation_legacy(ObjectHandle presentation, ObjectHandle pres_req, FfiList schemas, FfiList cred_defs, FfiList rev_reg_defs, FfiList rev_reg_entries, sbyte* result_p);

        [DllImport(__DllName, EntryPoint = "credx_create_revocation_registry", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_create_revocation_registry(FfiStr origin_did, ObjectHandle cred_def, FfiStr tag, FfiStr rev_reg_type, FfiStr issuance_type, long max_cred_num, FfiStr tails_dir_path, ObjectHandle* reg_def_p, ObjectHandle* reg_def_private_p, ObjectHandle* reg_entry_p, ObjectHandle* reg_init_delta_p);

        [DllImport(__DllName, EntryPoint = "credx_update_revocation_registry", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_update_revocation_registry(ObjectHandle cred_def, ObjectHandle rev_reg_def, ObjectHandle rev_reg_def_priv, ObjectHandle rev_reg, FfiList issued, FfiList revoked, ObjectHandle* rev_reg_p, ObjectHandle* rev_reg_delta_p);

        [DllImport(__DllName, EntryPoint = "credx_revoke_credential", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_revoke_credential(ObjectHandle cred_def, ObjectHandle rev_reg_def, ObjectHandle rev_reg_def_priv, ObjectHandle rev_reg, long cred_rev_idx, ObjectHandle* rev_reg_p, ObjectHandle* rev_reg_delta_p);

        [DllImport(__DllName, EntryPoint = "credx_revocation_registry_definition_get_attribute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_revocation_registry_definition_get_attribute(ObjectHandle handle, FfiStr name, byte** result_p);

        [DllImport(__DllName, EntryPoint = "credx_merge_revocation_registry_deltas", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_merge_revocation_registry_deltas(ObjectHandle rev_reg_delta_1, ObjectHandle rev_reg_delta_2, ObjectHandle* rev_reg_delta_p);

        [DllImport(__DllName, EntryPoint = "credx_create_or_update_revocation_state", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_create_or_update_revocation_state(ObjectHandle rev_reg_def, ObjectHandle rev_reg_delta, long rev_reg_index, long timestamp, FfiStr tails_path, ObjectHandle rev_state, ObjectHandle* rev_state_p);

        [DllImport(__DllName, EntryPoint = "credx_create_schema", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_create_schema(FfiStr origin_did, FfiStr schema_name, FfiStr schema_version, FfiList attr_names, long seq_no, ObjectHandle* result_p);

        [DllImport(__DllName, EntryPoint = "credx_schema_get_attribute", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern ErrorCode credx_schema_get_attribute(ObjectHandle handle, FfiStr name, byte** result_p);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct FfiCredRevInfo
    {
        public ObjectHandle reg_def;
        public ObjectHandle reg_def_private;
        public ObjectHandle registry;
        public long reg_idx;
        public FfiList reg_used;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct FfiList
    {
        public nuint count;
        public T* data;
        public PhantomData _pd;
    }


    internal enum ErrorCode : (usize)
    {
        Success = 0,
        Input = 1,
        IOError = 2,
        InvalidState = 3,
        Unexpected = 4,
        CredentialRevoked = 5,
        InvalidUserRevocId = 6,
        ProofRejected = 7,
        RevocationRegistryFull = 8,
    }


}
    